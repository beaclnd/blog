{"componentChunkName":"component---src-templates-blog-post-js","path":"/notes-for-shell-script/","result":{"data":{"site":{"siteMetadata":{"title":"JayTsang's Blog","author":{"name":"JayTsang","summary":"who lives and works in Beijing, China."}}},"markdownRemark":{"id":"59bd47da-9c5e-5cea-8614-bede8e3d4e41","excerpt":"单命令多行格式 当在Linux Shell…","html":"<h3>单命令多行格式</h3>\n<p>当在Linux Shell脚本中单个命令过长时，可以使用多行格式来表达，这样具有较好的可读性。若运行脚本后出现输入命令参数错误的提示，需要注意多行格式的正确性。</p>\n<p>单个命令以多行格式表示时，保证正确性需要注意的点：</p>\n<ul>\n<li>除了最后一行外，每行的末尾需要以反斜杠字符: ”\\“为结束字符</li>\n<li>行末尾的反斜杠字符之后不可以存在任何空白字符，如空格等 </li>\n</ul>\n<h3>运行脚本的程序</h3>\n<p>需要注意运行Shell脚本时所使用的Shell程序，如bash,zsh,csh,dsh等，因为某些脚本语法互不兼容，如使用bash语法的脚本应由bash来执行。</p>\n<p>当执行脚本时默认将使用脚本文件首行注释中指定的shell程序，如:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#!/usr/bin/bash</span></code></pre></div>\n<p>若指定的shell程序找不到，则会使用当前用户使用的默认shell程序，如环境变量$SHELL指向的shell程序。</p>\n<p>此外，还可以在运行脚本时指定所用的shell程序，如:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> script.sh</code></pre></div>\n<h3>脚本中执行脚本</h3>\n<p>当在脚本中使用命令嵌套执行脚本时，需要注意执行脚本的权限。如在脚本中使用字符串表示脚本名称及其参数，则可能出现无执行权限的问题，即使再外层脚本执行时使用了sudo命令。如脚本script.sh内有命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> -c <span class=\"token string\">\"another.sh hello 2\"</span></code></pre></div>\n<p>在执行script.sh时使用了sudo:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">bash</span> script.sh</code></pre></div>\n<p>但sudo未被传递给内部执行的another.sh脚本，可能出现无权限的问题。</p>\n<p>此时，可以在script.sh中使用如下形式来执行another.sh脚本:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">bash</span> -c another.sh hello <span class=\"token number\">2</span></code></pre></div>\n<h3>使用变量时字符串化</h3>\n<p>直接使用变量时的形式为：<code class=\"language-text\">$VAR_TEST</code>，当该变量是字符串且含有空格时，若使用bash来执行脚本，在某些语句中会报错：bash: [: too many arguments。所以这种情况下，在使用时需要将变量字符串化，即：<code class=\"language-text\">&quot;${VAR_TEST}&quot;</code></p>\n<p>对于字符串变量中含有特殊字符如<code class=\"language-text\">!</code>、<code class=\"language-text\">@</code>、<code class=\"language-text\">#</code>及<code class=\"language-text\">$</code>等，也应该对该变量字符串化，可使用单引号：<code class=\"language-text\">&#39;${VAR_TEST}&#39;</code></p>\n<h3>出错退出</h3>\n<p>默认情况下，使用bash等程序执行脚本时，若中间命令执行出现错误，并不会使整个脚本终止，而是会继续执行，此时，可以在脚本首行使用命令:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">set</span> -e</code></pre></div>\n<p>这样，只要有任何命令出错，脚本程序将终止执行</p>","frontmatter":{"title":"笔记： 踩坑——Shell脚本错误及经验总结","date":"2021/10/17","description":"对自己在编写Linux Shell脚本时遇到的错误及经验进行梳理与总结","tags":["笔记","踩坑","Shell"]},"fields":{"readingTime":{"text":"1 min read"}}}},"pageContext":{"slug":"/notes-for-shell-script/","previous":{"fields":{"slug":"/free-tls-certificate-with-letsencrypt/"},"frontmatter":{"title":"为网站申请免费TLS/SSL证书"}},"next":{"fields":{"slug":"/notes-for-docker-usage/"},"frontmatter":{"title":"笔记： 踩坑——Docker使用错误及经验总结"}}}}}