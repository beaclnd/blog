{"componentChunkName":"component---src-templates-blog-post-js","path":"/tls-with-various-publickey-algorithms/","result":{"data":{"site":{"siteMetadata":{"title":"JayTsang's Blog","author":{"name":"JayTsang","summary":"who lives and works in Beijing, China."}}},"markdownRemark":{"id":"5bff31fe-f84c-59ef-93da-1ce07fb1f111","excerpt":"本试验主要是基于RSA与EC算法生成公钥证书，并结合该证书与NodeJS建立HTTPS/TLS服务，然后使用客户端连接该服务，并记录TLS连接建立的结果。 Note: 试验相关程序代码见 https://gitee.com/JayTsang/myblog-tls-with-various-publickey…","html":"<p>本试验主要是基于RSA与EC算法生成公钥证书，并结合该证书与NodeJS建立HTTPS/TLS服务，然后使用客户端连接该服务，并记录TLS连接建立的结果。</p>\n<blockquote>\n<p>Note: 试验相关程序代码见 <a href=\"https://gitee.com/JayTsang/myblog-tls-with-various-publickey-algorithms.git\">https://gitee.com/JayTsang/myblog-tls-with-various-publickey-algorithms.git</a> </p>\n</blockquote>\n<p>其中针对EC算法主要测试了Openssl(v1.1.1c)所支持的包括secp256k1,secp256r1/prime256v1,curve25519,curve448在内的各种曲线(使用命令<code class=\"language-text\">openssl ecparam --list_curves</code>可查看所有曲线名)。</p>\n<blockquote>\n<p>Note: MacOS下，首先需要确认<strong>openssl</strong>的版本，command： <code class=\"language-text\">openssl version</code>，如果出现<strong>LibreSSL</strong>，需要首先安装<strong>openssl</strong>，并修改默认链接，或者将代码中相关<strong>openssl</strong>修改为<strong>openssl</strong>的绝对路径。</p>\n</blockquote>\n<p>试验中的服务端基于NodeJS编写，使用NodeJS自带的TLS库。</p>\n<p>试验中的客户端主要包括：</p>\n<ul>\n<li>NodeJS编写的客户端程序(自动连接服务端), 使用NodeJS自带的TLS库(v10.16.3)；</li>\n<li>\n<p>主流浏览器(手动连接服务端)：</p>\n<ul>\n<li>Chrome: 80.0.3987.132（正式版本）（64 位）</li>\n<li>Firefox: 68.0.1 (64-bit)</li>\n<li>Edge: 42.17134.1.0</li>\n<li>Safari: 13.0.5 (13608.5.12)</li>\n<li>IE: 11.648.17134.0 </li>\n</ul>\n</li>\n</ul>\n<h2>试验流程</h2>\n<p>首先，使用NodeJS客户端与TLS服务端进行连接，并获得使用每种公钥算法时的连接结果，从中挑出连接结果为成功的公钥算法。</p>\n<p>然后针对上述连接成功的公钥算法，使用浏览器作为客户端与TLS服务端进行连接，再记录连接结果。</p>\n<p>使用上述方法流程，最终找出在建立TLS会话时，NodeJS客户端与浏览器都支持的用于生成身份公钥证书的公钥算法。</p>\n<h3>安装依赖</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> <span class=\"token function\">install</span></code></pre></div>\n<h3>NodeJS客户端连接TLS服务</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> start:batch</code></pre></div>\n<p>上述命令将自动基于RSA及EC的若干曲线算法生成相应的自签名公钥证书，构建TLS服务，并使客户端程序自动连接该TLS服务，最后输出连接结果统计情况。</p>\n<p>统计结果如下：</p>\n<table>\n<thead>\n<tr>\n<th>algorithm</th>\n<th>algParam</th>\n<th>status</th>\n<th>reason</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RSA</td>\n<td>1024</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>2048</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>4096</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp112r1</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp112r2</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp128r1</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp128r2</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp160k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp160r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp160r2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp192k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp224k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp224r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp256k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp384r1</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp521r1</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime192v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime192v2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime192v3</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime239v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime239v2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime239v3</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime256v1</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect113r1</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect113r2</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect131r1</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect131r2</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect163k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect163r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect163r2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect193r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect193r2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect233k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect233r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect239k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect283k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect283r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect409k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect409r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect571k1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>sect571r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb163v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb163v2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb163v3</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb176v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb191v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb191v2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb191v3</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb208w1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb239v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb239v2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb239v3</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb272w1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb304w1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb359v1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2pnb368w1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>c2tnb431r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls1</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls3</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls4</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls5</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls6</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls7</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls8</td>\n<td>Failed</td>\n<td>key too small</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls9</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls10</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls11</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>wap-wsg-idm-ecid-wtls12</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP160r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP160t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP192r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP192t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP224r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP224t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP256r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP256t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP320r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP320t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP384r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP384t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP512r1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>brainpoolP512t1</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>SM2</td>\n<td>Failed</td>\n<td>no shared cipher</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>curve25519</td>\n<td>Success</td>\n<td></td>\n</tr>\n<tr>\n<td>EC</td>\n<td>curve448</td>\n<td>Success</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>上述结果中，基于RSA(密钥长度1024或2048)生成的公钥证书的TLS连接都是成功的，基于EC生成的公钥证书的TLS连接只有曲线是secp384r1,secp521r1,secp256r1/prime256v1,curve25519以及curve448时是成功的。</p>\n<p>除上述曲线外，EC中其他曲线在本试验中均连接失败，返回的错误信息主要是no shared cipher或key too small。</p>\n<p>特别地，SM2是国密椭圆曲线，目前Openssl支持生成SM2密钥对，但由于缺少相应的TLS国际标准因此没有支持其TLS连接。<sup>[1]</sup>而GMSSL在做相应的实现工作<sup>[2]</sup>。</p>\n<p>从上述连接结果中抽取出成功的情况，统计如下：</p>\n<table>\n<thead>\n<tr>\n<th>algorithm</th>\n<th>algParam</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RSA</td>\n<td>1024</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>2048</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>4096</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp384r1</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp521r1</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime256v1</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>curve25519</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>curve448</td>\n<td>Success</td>\n</tr>\n</tbody>\n</table>\n<h3>浏览器连接TLS服务</h3>\n<p>上述结果是使用基于NodeJS TLS库实现的客户端而得到的，接下来使用浏览器作为客户端与TLS服务端进行连接（只需针对上述连接结果为成功的公钥算法进行测试）。</p>\n<p>运行命令:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> start:single <span class=\"token operator\">&lt;</span>alg<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>algParam<span class=\"token operator\">></span></code></pre></div>\n<p>如：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> start:single RSA <span class=\"token number\">4096</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">yarn</span> start:single EC curve25519</code></pre></div>\n<p>上述命令将生成公钥证书RSA.cert或EC.cert，并以此建立其TLS服务。</p>\n<p>启动浏览器，访问地址<a href=\"https://localhost:8888\">https://localhost:8888</a> </p>\n<p>将结果记录如下：</p>\n<table>\n<thead>\n<tr>\n<th>algorithm</th>\n<th>algParam</th>\n<th>Chrome</th>\n<th>Firefox</th>\n<th>Edge</th>\n<th>Safari</th>\n<th>IE</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>RSA</td>\n<td>1024</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>2048</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>RSA</td>\n<td>4096</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp384r1</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>secp521r1</td>\n<td>Failed(no shared cipher)</td>\n<td>Success</td>\n<td>Failed(no shared cipher)</td>\n<td>Success</td>\n<td>Failed(o shared cipher)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>prime256v1</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n<td>Success</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>curve25519</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n</tr>\n<tr>\n<td>EC</td>\n<td>curve448</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n<td>Failed(no shared cipher)</td>\n</tr>\n</tbody>\n</table>\n<h2>总结</h2>\n<p>从上述结果来看，目前要想成功建立TLS连接，同时兼容NodeJS客户端与上述主流浏览器，在生成实体身份公钥证书时，非对称密钥应该选择基于RSA算法或者EC算法中的secp384r1曲线或secp256r1/prime256v1曲线。</p>\n<p>而secp384r1与secp256r1/prime256v1都是NIST的P系曲线<sup>[3]</sup>，基于对其后门的怀疑与担忧，目前还是使用RSA算法来构建公钥证书更为合适。<sup>[4]</sup></p>\n<p>也期待浏览器能早日实现对ed25519以及ed448证书的支持。</p>\n<h2>参考链接</h2>\n<ol>\n<li><a href=\"https://github.com/openssl/openssl/issues/7491\">https://github.com/openssl/openssl/issues/7491</a>;</li>\n<li><a href=\"https://github.com/guanzhi/GmSSL\">https://github.com/guanzhi/GmSSL</a> </li>\n<li>Elliptic Curve Cryptography (ECC) Cipher Suites for Transport Layer Security (TLS) <a href=\"https://tools.ietf.org/search/rfc4492#page-32\">https://tools.ietf.org/search/rfc4492#page-32</a></li>\n<li>Problems With Elliptic Curve CryptographyIn TLS and SSHJoe TestaPositron SecurityOctober 19, 2017\n, <a href=\"https://www.rochestersecurity.org/wp-content/uploads/2017/10/RSS2017-T2-Testa.pdf\">https://www.rochestersecurity.org/wp-content/uploads/2017/10/RSS2017-T2-Testa.pdf</a></li>\n</ol>","frontmatter":{"title":"不同公钥算法所生成证书建立TLS连接时的表现","date":"2020/03/12","description":"本试验主要是基于RSA与EC算法生成公钥证书，并结合该证书与NodeJS建立HTTPS/TLS服务，然后使用客户端连接该服务，并记录TLS连接建立的结果","tags":["实验","tls","加密","公钥加密"]},"fields":{"readingTime":{"text":"3 min read"}}}},"pageContext":{"slug":"/tls-with-various-publickey-algorithms/","previous":null,"next":{"fields":{"slug":"/tls-mutual-authentication/"},"frontmatter":{"title":"双向身份验证HTTPS/TLS连接试验"}}}}}